var canvas = new fabric.Canvas('c', { selection: false });
const TextPoly = require('../../TextPoly/TextPoly.js');

var line, isDown, startedShape = false, finishedShape = false, startingPoint;
var shapePoints = [[]];
var font_for_map = '../DIN-Condensed-Bold.ttf';
var numClicksInBox = 0;
var hasClickedStartingPointAgain = false;
var hasClickedSubmit = false;
var c = document.getElementById('c');

var hoverLine;

canvas.on('mouse:down', function(o){

    if (!finishedShape) {
        var pointer = canvas.getPointer(o.e);
        var points = [ pointer.x, pointer.y, pointer.x, pointer.y ];
        if (!startedShape) {
            startedShape = true;
            startLine(o);
        } else {
            // finish current line
            line.set({ x2: pointer.x, y2: pointer.y });
            canvas.add(line);
            canvas.remove(hoverLine);
            canvas.renderAll();
            startLine(o);
        }

        numClicksInBox++;
        if (numClicksInBox == 1) {
            startingPoint = [pointer.x, pointer.y];
            d3.select("#instructions_1").style("color", "#bcbcbc");
            d3.select("#instructions_2").style("color", "#505050");
        } else if (numClicksInBox == 3) {
            d3.select("#instructions_2").style("color", "#bcbcbc");
            d3.select("#instructions_3").style("color", "#505050");
        } else if (numClicksInBox > 3) {
            // get location of click, detect if it is by starting point
            var x_diff = pointer.x - startingPoint[0];
            var y_diff = pointer.y - startingPoint[1];
            var distance = Math.sqrt( x_diff*x_diff + y_diff*y_diff );
            if (distance < 5) {
                finishedShape = true;
                d3.select("#instructions_3").style("color", "#bcbcbc");
                d3.select("#instructions_4").style("color", "#505050");
                hoverLine = null;
            }
        }
    }
});

canvas.on('mouse:move', function(o) {
    if (hoverLine && !finishedShape) {
        var pointer = canvas.getPointer(o.e);
        hoverLine.set({x2: pointer.x, y2: pointer.y});
        canvas.renderAll();
    }
});

var redwingPath = "M443.1566380829364,816.2564446251781L453.5091270434219,816.2564446251781L453.5091270434219,818.7669977211626L453.5091270434219,820.0222626460309L453.5091270434219,821.2775198223244L452.0302000490859,821.2775198223244L452.0302000490859,822.5327692501596L452.0302000490859,823.788010929653L453.5091270434219,825.0432448610372L454.98805403775793,826.2984710443998L456.46698103209405,826.2984710443998L457.94590802643006,826.2984710443998L459.4248350208327,828.8089001675835L460.9037620151688,830.0641031077248L460.9037620151688,832.5744857455138L460.9037620151688,833.829665443569L460.9037620151688,837.595158055803L460.9037620151688,838.8503067663405L460.9037620151688,841.3605809479777L460.9037620151688,845.1259341237019L460.9037620151688,846.3810363571101L459.4248350208327,847.6361308447667L459.4248350208327,848.8912175868172L457.94590802643006,848.8912175868172L456.46698103209405,847.6361308447667L456.46698103209405,846.3810363571101L454.98805403775793,846.3810363571101L453.5091270434219,847.6361308447667L453.5091270434219,848.8912175868172L452.0302000490859,850.1462965833489L452.0302000490859,851.4013678346528L457.94590802643006,852.656431340758L462.3826890095048,857.676607916248L459.4248350208327,860.1866497364244L474.21410496432645,868.9715521708422L483.08766693040934,882.7756322868227L490.48230190222284,889.0499044753378L491.96122889655885,889.0499044753378L497.8769368739697,892.814374893991L500.8347908627085,894.0691828853451L506.7504988400526,894.0691828853451L514.1451338118661,895.3239831360697L518.5819147948743,897.8335604164458L521.539768783613,900.3431067361671L520.0608417892769,902.8526220963104L503.7926448513805,902.8526220963104L500.8347908627085,901.5978682861314L500.8347908627085,900.3431067361671L499.35586386830573,899.0883374463301L497.8769368739697,899.0883374463301L497.8769368739697,897.8335604164458L496.3980098796337,897.8335604164458L494.9190828852976,900.3431067361671L491.96122889655885,901.5978682861314L490.48230190222284,902.8526220963104L489.00337490788684,905.3621064980107L490.48230190222284,909.1262750556634L491.96122889655885,914.1450581213576L493.44015589089497,929.2006644670037L499.35586386830573,929.2006644670037L499.35586386830573,940.491638088366L490.48230190222284,940.491638088366L487.5244479134841,936.7280498394393L486.0455209191481,930.4552480369166L462.3826890095048,930.4552480369166L460.9037620151688,960.5629330342636L440.1987840942643,960.5629330342636L434.2830761168534,951.7819851298409L434.2830761168534,935.4735049513693L434.2830761168534,915.3997345414828L434.2830761168534,905.3621064980107L423.9305871563679,905.3621064980107L423.9305871563679,911.635682065913L422.4516601620319,912.8903739629604L420.97273316769576,912.8903739629604L419.49380617329314,912.8903739629604L419.49380617329314,911.635682065913L418.014879178957,910.3809824301861L416.535952184621,910.3809824301861L416.535952184621,909.1262750556634L415.057025190285,909.1262750556634L413.57809819588226,907.8715599421994L412.09917120154626,907.8715599421994L412.09917120154626,901.5978682861314L410.62024420721025,879.0109760733321L410.62024420721025,877.7560751846177L410.62024420721025,875.2462501800619L409.1413172128741,865.2066404471116L407.6623902184715,862.6966605797061L407.6623902184715,861.4416590300971L407.6623902184715,860.1866497364244L409.1413172128741,858.9316326985136L410.62024420721025,846.3810363571101L410.62024420721025,845.1259341237019L412.09917120154626,843.8708241444838L410.62024420721025,842.6157064192521L410.62024420721025,841.3605809479777L410.62024420721025,838.8503067663405L409.1413172128741,836.3400015985535L409.1413172128741,832.5744857455138L407.6623902184715,827.5536894799152L406.1834632241355,827.5536894799152L406.1834632241355,826.2984710443998L406.1834632241355,825.0432448610372L406.1834632241355,822.5327692501596L406.1834632241355,817.5117250475741L434.2830761168534,817.5117250475741L434.2830761168534,816.2564446251781Z";
var shapePoints = [[]];

var singlePoints = redwingPath.explode(redwingPath.substring(1, redwingPath.length), 'L');
for (var i = 0; i < singlePoints.length; i+=2) {
   shapePoints[0][shapePoints[0].length] = [singlePoints[i], singlePoints[i+1]];
}

var phraseNoSpaces = "RedwingCafe"
TextPoly.execute(
    shapePoints, // shape outline
    phraseNoSpaces, // phrase
    4, // padding
    font_for_map, // font file
    function(chars, shape_info) {
        var svg = d3.select("#shape_svg");
        svg.append("path")
            .attr("d", arrayToPath(shapePoints[0]))
            .classed("neighborhoodUnFocus", true);
        for (var i = 0; i < chars.length; i++) {
            svg.append("path")
                .attr("d", chars[i]);
        }
    },
    null // rando json to use in callback
);

/*converts given 2d array of form:
 [
 [x1, y1]
 [x2, y2]
 ...
 [xn, yn]
 ]
 to SVG path string of form:
 "Mx1,y1Lx2,y2...Lxn,yn"
 Inserting move-to and line-to characters as necessary.
 Coordinates must encompass one shape.
 */
function  arrayToPath(polyArray) {

    //generate path for topPoly
    var pathString = "M" + polyArray[0][0] + "," + polyArray[0][1];
    for (var j = 1; j < polyArray.length; j++) {
        pathString += "L" + polyArray[j][0] + "," + polyArray[j][1];
    }

    //add close path character to draw line back to initial point
    pathString += 'Z';

    return pathString;
}


