{"version":3,"file":"polyk.js","sources":["../index.js"],"sourcesContent":["/**\n * Checks, if polygon is simple. Polygon is simple, when its edges don't cross each other.\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n * @returns {boolean} true if Polygon is simple\n */\nfunction IsSimple (polygon) {\n  var p = polygon\n  var n = p.length >> 1\n  if (n < 4) return true\n  var a1 = Point()\n  var a2 = Point()\n  var b1 = Point()\n  var b2 = Point()\n  var c = Point()\n\n  for (var i = 0; i < n; i++) {\n    a1.x = p[2 * i]\n    a1.y = p[2 * i + 1]\n    if (i == n - 1) {\n      a2.x = p[0]\n      a2.y = p[1]\n    } else {\n      a2.x = p[2 * i + 2]\n      a2.y = p[2 * i + 3]\n    }\n\n    for (var j = 0; j < n; j++) {\n      if (Math.abs(i - j) < 2) continue\n      if (j == n - 1 && i == 0) continue\n      if (i == n - 1 && j == 0) continue\n\n      b1.x = p[2 * j]\n      b1.y = p[2 * j + 1]\n      if (j == n - 1) {\n        b2.x = p[0]\n        b2.y = p[1]\n      } else {\n        b2.x = p[2 * j + 2]\n        b2.y = p[2 * j + 3]\n      }\n\n      if (GetLineIntersection(a1, a2, b1, b2, c) != null) return false\n    }\n  }\n  return true\n}\nmodule.exports.IsSimple = IsSimple\n\n/**\n * Checks, if polygon is convex. Polygon is convex, when each inner angle is <= 180Â°.\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n * @returns {boolean}\n */\nfunction IsConvex (polygon) {\n  var p = polygon\n  if (p.length < 6) return true\n  var l = p.length - 4\n  for (var i = 0; i < l; i += 2) {\n    if (!convex(p[i], p[i + 1], p[i + 2], p[i + 3], p[i + 4], p[i + 5])) return false\n  }\n  if (!convex(p[l], p[l + 1], p[l + 2], p[l + 3], p[0], p[1])) return false\n  if (!convex(p[l + 2], p[l + 3], p[0], p[1], p[2], p[3])) return false\n  return true\n}\nmodule.exports.IsConvex = IsConvex\n\n/**\n * Returns the area of polygon.\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n * @returns {number}\n */\nfunction GetArea (polygon) {\n  var p = polygon\n  if (p.length < 6) return 0\n  var l = p.length - 2\n  var sum = 0\n  for (var i = 0; i < l; i += 2) {\n    sum += (p[i + 2] - p[i]) * (p[i + 1] + p[i + 3])\n  }\n  sum += (p[0] - p[l]) * (p[l + 1] + p[1])\n  return -sum * 0.5\n}\nmodule.exports.GetArea = GetArea\n\n/**\n * Returns the Axis-aligned Bounding Box of polygon\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n * @returns {AABB}\n * @example\n * //={x:0, y:0, width:0, height:0}\n */\nfunction GetAABB (polygon) {\n  var p = polygon\n  var minx = Infinity\n  var miny = Infinity\n  var maxx = -minx\n  var maxy = -miny\n  for (var i = 0; i < p.length; i += 2) {\n    minx = Math.min(minx, p[i])\n    maxx = Math.max(maxx, p[i])\n    miny = Math.min(miny, p[i + 1])\n    maxy = Math.max(maxy, p[i + 1])\n  }\n  return {x: minx, y: miny, width: maxx - minx, height: maxy - miny}\n}\nmodule.exports.GetAABB = GetAABB\n\n/**\n * Computes the triangulation. Output array is array of triangles (triangle = 3 indices of polygon vertices).\n *\n * Works with simple polygons only.\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n * @returns {number[]} array of triangles (triangle = 3 indices of polygon vertices)\n * @example\n * var ids = PolyK.Triangulate([0, 0, 1, 0, 1, 1, 0, 1]);\n * //=[0, 1, 2, 0, 2, 3]\n */\nfunction Triangulate (polygon) {\n  var p = polygon\n  var n = p.length >> 1\n  if (n < 3) return []\n  var tgs = []\n  var avl = []\n  for (var i = 0; i < n; i++) { avl.push(i) }\n\n  var i = 0\n  var al = n\n  while (al > 3) {\n    var i0 = avl[(i + 0) % al]\n    var i1 = avl[(i + 1) % al]\n    var i2 = avl[(i + 2) % al]\n\n    var ax = p[2 * i0]\n    var ay = p[2 * i0 + 1]\n    var bx = p[2 * i1]\n    var by = p[2 * i1 + 1]\n    var cx = p[2 * i2]\n    var cy = p[2 * i2 + 1]\n\n    var earFound = false\n    if (convex(ax, ay, bx, by, cx, cy)) {\n      earFound = true\n      for (var j = 0; j < al; j++) {\n        var vi = avl[j]\n        if (vi == i0 || vi == i1 || vi == i2) continue\n        if (PointInTriangle(p[2 * vi], p[2 * vi + 1], ax, ay, bx, by, cx, cy)) {\n          earFound = false\n          break\n        }\n      }\n    }\n    if (earFound) {\n      tgs.push(i0, i1, i2)\n      avl.splice((i + 1) % al, 1)\n      al--\n      i = 0\n    } else if (i++ > 3 * al) break    // no convex angles :(\n  }\n  tgs.push(avl[0], avl[1], avl[2])\n  return tgs\n}\nmodule.exports.Triangulate = Triangulate\n\n/**\n * Slices the polygon with line segment A-B, defined by [ax,ay] and [bx,by]. A, B must not lay inside a polygon. Returns an array of polygons.\n *\n * Works with simple polygons only.\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n * @param {number} startX Start Coordinate [x]\n * @param {number} startY Start Coordinate [y]\n * @param {number} endX End Coordinate [x]\n * @param {number} endY End Coordinate [y]\n * @returns {number[][]} Array of Polygon\n */\nfunction Slice (polygon, startX, startY, endX, endY) {\n  var p = polygon\n  var ax = startX\n  var ay = startY\n  var bx = endX\n  var by = endY\n  if (ContainsPoint(p, ax, ay) || ContainsPoint(p, bx, by)) {\n    return [p.slice(0)]\n  }\n\n  var a = Point(ax, ay)\n  var b = Point(bx, by)\n  var iscs = []  // intersections\n  var ps = []  // points\n  for (var i = 0; i < p.length; i += 2) {\n    ps.push(Point(p[i], p[i + 1]))\n  }\n  for (var i = 0; i < ps.length; i++) {\n    var isc = Point(0, 0)\n    isc = GetLineIntersection(a, b, ps[i], ps[(i + 1) % ps.length], isc)\n    var fisc = iscs[0]\n    var lisc = iscs[iscs.length - 1]\n    // && (isc.x!=ps[i].x || isc.y!=ps[i].y) )\n    if (isc && (fisc == null || distance(isc, fisc) > 1e-10) && (lisc == null || distance(isc, lisc) > 1e-10)) {\n      isc.flag = true\n      iscs.push(isc)\n      ps.splice(i + 1, 0, isc)\n      i++\n    }\n  }\n\n  if (iscs.length < 2) return [p.slice(0)]\n  var comp = function (u, v) { return distance(a, u) - distance(a, v) }\n  iscs.sort(comp)\n\n  var pgs = []\n  var dir = 0\n  while (iscs.length > 0) {\n    // var n = ps.length // is assigned a value but never used. (no-unused-vars)\n    var i0 = iscs[0]\n    var i1 = iscs[1]\n    // if(i0.x==i1.x && i0.y==i1.y) { iscs.splice(0,2); continue;}\n    var index0 = ps.indexOf(i0)\n    var index1 = ps.indexOf(i1)\n    var solved = false\n\n    if (firstWithFlag(ps, index0) === index1) {\n      solved = true\n    } else {\n      i0 = iscs[1]\n      i1 = iscs[0]\n      index0 = ps.indexOf(i0)\n      index1 = ps.indexOf(i1)\n      if (firstWithFlag(ps, index0) === index1) solved = true\n    }\n    if (solved) {\n      dir--\n      var pgn = getPoints(ps, index0, index1)\n      pgs.push(pgn)\n      ps = getPoints(ps, index1, index0)\n      i0.flag = i1.flag = false\n      iscs.splice(0, 2)\n      if (iscs.length == 0) pgs.push(ps)\n    } else {\n      dir++\n      iscs.reverse()\n    }\n    if (dir > 1) break\n  }\n  var result = []\n  for (var i = 0; i < pgs.length; i++) {\n    var pg = pgs[i]\n    var npg = []\n    for (var j = 0; j < pg.length; j++) { npg.push(pg[j].x, pg[j].y) }\n    result.push(npg)\n  }\n  return result\n}\nmodule.exports.Slice = Slice\n\n/**\n * Checks, if polygon contains [x, y].\n *\n * Works with simple polygons only.\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n * @param {number} pointX Coordinate [x]\n * @param {number} pointY Coordinate [y]\n * @returns {boolean} depth\n */\nfunction ContainsPoint (polygon, pointX, pointY) {\n  var p = polygon\n  var px = pointX\n  var py = pointY\n  var n = p.length >> 1\n  var ax\n  var ay = p[2 * n - 3] - py\n  var bx = p[2 * n - 2] - px\n  var by = p[2 * n - 1] - py\n\n  // var lup = by > ay;\n  for (var i = 0; i < n; i++) {\n    ax = bx\n    ay = by\n    bx = p[2 * i] - px\n    by = p[2 * i + 1] - py\n    if (ay === by) continue\n    var lup = by > ay\n  }\n\n  var depth = 0\n  for (var i = 0; i < n; i++) {\n    ax = bx\n    ay = by\n    bx = p[2 * i] - px\n    by = p[2 * i + 1] - py\n    if (ay < 0 && by < 0) continue  // both \"up\" or both \"down\"\n    if (ay > 0 && by > 0) continue  // both \"up\" or both \"down\"\n    if (ax < 0 && bx < 0) continue   // both points on the left\n\n    if (ay === by && Math.min(ax, bx) <= 0) return true\n    if (ay === by) continue\n\n    var lx = ax + (bx - ax) * (-ay) / (by - ay)\n    if (lx === 0) return true      // point on edge\n    if (lx > 0) depth++\n    if (ay === 0 && lup && by > ay) depth--  // hit vertex, both up\n    if (ay === 0 && !lup && by < ay) depth-- // hit vertex, both down\n    lup = by > ay\n  }\n  return (depth & 1) === 1\n}\nmodule.exports.ContainsPoint = ContainsPoint\n\n/**\n * Finds the closest point of polygon, which lays on ray defined by [x,y] (origin) and [dx,dy] (direction).\n *\n * \"dist\" is the distance of the polygon point, \"edge\" is the number of the edge, on which intersection occurs, \"norm\" is the normal in that place, \"refl\" is reflected direction.\n *\n * Works with simple polygons only.\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n * @param {number} originX Origin [x]\n * @param {number} originY Origin [y]\n * @param {number} directionX Direction [x]\n * @param {number} directionY Direction [y]\n * @returns {Raycast}\n * @example\n * //={dist:0, edge:0, norm:{x:0, y:0}, refl:{x:0, y:0}}\n */\nfunction Raycast (polygon, originX, originY, directionX, directionY, isc) {\n  var p = polygon\n  var x = originX\n  var y = originY\n  var dx = directionX\n  var dy = directionY\n  var l = p.length - 2\n  var empty = emptyPoints()\n  var a1 = empty[0]\n  var a2 = empty[1]\n  var b1 = empty[2]\n  var b2 = empty[3]\n  var c = empty[4]\n  a1.x = x\n  a1.y = y\n  a2.x = x + dx\n  a2.y = y + dy\n\n  if (isc === null || isc === undefined) {\n    isc = {dist: 0, edge: 0, norm: {x: 0, y: 0}, refl: {x: 0, y: 0}}\n  }\n  isc.dist = Infinity\n\n  var nisc\n  for (var i = 0; i < l; i += 2) {\n    b1.x = p[i]\n    b1.y = p[i + 1]\n    b2.x = p[i + 2]\n    b2.y = p[i + 3]\n    nisc = RayLineIntersection(a1, a2, b1, b2, c)\n    if (nisc) {\n      isc = updateISC(dx, dy, a1, b1, b2, c, i / 2, isc)\n    }\n  }\n  b1.x = b2.x\n  b1.y = b2.y\n  b2.x = p[0]\n  b2.y = p[1]\n  nisc = RayLineIntersection(a1, a2, b1, b2, c)\n  if (nisc) {\n    isc = updateISC(dx, dy, a1, b1, b2, c, (p.length / 2) - 1, isc)\n  }\n\n  return (isc.dist !== Infinity) ? isc : null\n}\nmodule.exports.Raycast = Raycast\n\n/**\n * Finds the point on polygon edges, which is closest to [x,y]. Returns an object in this format\n *\n * \"dist\" is the distance of the polygon point, \"edge\" is the number of the closest edge, \"point\" is the closest point on that edge, \"norm\" is the normal from \"point\" to [x,y].\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n * @param {number} x Coordinate [x]\n * @param {number} y Coordinate [y]\n * @returns {ClosestEdge}\n * @example\n * //={dist:0, edge:0, point:{x:0, y:0}, norm:{x:0, y:0}}\n */\nfunction ClosestEdge (polygon, x, y, isc) {\n  var p = polygon\n  var l = p.length - 2\n  var empty = emptyPoints()\n  var a1 = empty[0]\n  var b1 = empty[2]\n  var b2 = empty[3]\n  // var c = tp[4] // is assigned a value but never used.\n  a1.x = x\n  a1.y = y\n\n  if (isc == null) {\n    isc = {dist: 0, edge: 0, point: {x: 0, y: 0}, norm: {x: 0, y: 0}}\n  }\n  isc.dist = Infinity\n\n  for (var i = 0; i < l; i += 2) {\n    b1.x = p[i]\n    b1.y = p[i + 1]\n    b2.x = p[i + 2]\n    b2.y = p[i + 3]\n    isc = pointLineDist(a1, b1, b2, i >> 1, isc)\n  }\n  b1.x = b2.x\n  b1.y = b2.y\n  b2.x = p[0]\n  b2.y = p[1]\n  isc = pointLineDist(a1, b1, b2, l >> 1, isc)\n\n  var idst = 1 / isc.dist\n  isc.norm.x = (x - isc.point.x) * idst\n  isc.norm.y = (y - isc.point.y) * idst\n  return isc\n}\nmodule.exports.ClosestEdge = ClosestEdge\n\n/**\n * Reverse\n *\n * @param {number[]} polygon [x1, y1, x2, y2...]\n */\nfunction Reverse (polygon) {\n  var p = polygon\n  var np = []\n  for (var j = p.length - 2; j >= 0; j -= 2) { np.push(p[j], p[j + 1]) }\n  return np\n}\nmodule.exports.Reverse = Reverse\n\n/**\n * Point Line Distance\n *\n * @private\n * @param {Point} p\n * @param {Point} a\n * @param {Point} b\n * @param {??} edge\n * @param {??} isc\n * @returns {??} ISC\n */\nfunction pointLineDist (p, a, b, edge, isc) {\n  var x = p.x\n  var y = p.y\n  var x1 = a.x\n  var y1 = a.y\n  var x2 = b.x\n  var y2 = b.y\n\n  var A = x - x1\n  var B = y - y1\n  var C = x2 - x1\n  var D = y2 - y1\n\n  var dot = A * C + B * D\n  var lenSq = C * C + D * D\n  var param = dot / lenSq\n\n  var xx\n  var yy\n\n  if (param < 0 || (x1 == x2 && y1 == y2)) {\n    xx = x1\n    yy = y1\n  } else if (param > 1) {\n    xx = x2\n    yy = y2\n  } else {\n    xx = x1 + param * C\n    yy = y1 + param * D\n  }\n\n  var dx = x - xx\n  var dy = y - yy\n  var dst = Math.sqrt(dx * dx + dy * dy)\n  if (dst < isc.dist) {\n    isc.dist = dst\n    isc.edge = edge\n    isc.point.x = xx\n    isc.point.y = yy\n  }\n  return isc\n}\n\n/**\n * Update ISC\n *\n * @private\n * @param {number} dx\n * @param {number} dy\n * @param {Point} a1\n * @param {Point} b1\n * @param {Point} b2\n * @param {Point} c\n * @param {??} edge\n * @param {??} isc\n * @returns {??}\n */\nfunction updateISC (dx, dy, a1, b1, b2, c, edge, isc) {\n  var nrl = distance(a1, c)\n  if (nrl < isc.dist) {\n    var ibl = 1 / distance(b1, b2)\n    var nx = -(b2.y - b1.y) * ibl\n    var ny = (b2.x - b1.x) * ibl\n    var ddot = 2 * (dx * nx + dy * ny)\n    isc.dist = nrl\n    isc.norm.x = nx\n    isc.norm.y = ny\n    isc.refl.x = -ddot * nx + dx\n    isc.refl.y = -ddot * ny + dy\n    isc.edge = edge\n  }\n  return isc\n}\n\n/**\n * Get Points\n *\n * @private\n * @param {number[]} points\n * @param {number} index0\n * @param {number} index1\n * @returns {number[]} points\n */\nfunction getPoints (points, index0, index1) {\n  var n = points.length\n  var result = []\n  if (index1 < index0) index1 += n\n  for (var i = index0; i <= index1; i++) { result.push(points[i % n]) }\n  return result\n}\n\n/**\n * First With Flag\n *\n * @private\n * @param {Point[]} points\n * @param {number} index\n * @returns {number}\n */\nfunction firstWithFlag (points, index) {\n  var n = points.length\n  while (true) {\n    index = (index + 1) % n\n    if (points[index].flag) {\n      return index\n    }\n  }\n}\n\n/**\n * Point in Triangle\n *\n * @private\n * @param {number} px\n * @param {number} py\n * @param {number} ax\n * @param {number} ay\n * @param {number} bx\n * @param {number} by\n * @param {number} cx\n * @param {number} cy\n * @returns {boolean}\n */\nfunction PointInTriangle (px, py, ax, ay, bx, by, cx, cy) {\n  var v0x = cx - ax\n  var v0y = cy - ay\n  var v1x = bx - ax\n  var v1y = by - ay\n  var v2x = px - ax\n  var v2y = py - ay\n\n  var dot00 = v0x * v0x + v0y * v0y\n  var dot01 = v0x * v1x + v0y * v1y\n  var dot02 = v0x * v2x + v0y * v2y\n  var dot11 = v1x * v1x + v1y * v1y\n  var dot12 = v1x * v2x + v1y * v2y\n\n  var invDenom = 1 / (dot00 * dot11 - dot01 * dot01)\n  var u = (dot11 * dot02 - dot01 * dot12) * invDenom\n  var v = (dot00 * dot12 - dot01 * dot02) * invDenom\n\n  // Check if point is in triangle\n  return (u >= 0) && (v >= 0) && (u + v < 1)\n}\n\n/**\n * RayLine Intersection\n *\n * @private\n * @param {Point} a1\n * @param {Point} a2\n * @param {Point} b1\n * @param {Point} b2\n * @param {Point} c\n */\nfunction RayLineIntersection (a1, a2, b1, b2, c) {\n  var dax = (a1.x - a2.x)\n  var dbx = (b1.x - b2.x)\n  var day = (a1.y - a2.y)\n  var dby = (b1.y - b2.y)\n\n  var Den = dax * dby - day * dbx\n  if (Den == 0) return null  // parallel\n\n  var A = (a1.x * a2.y - a1.y * a2.x)\n  var B = (b1.x * b2.y - b1.y * b2.x)\n\n  var I = c\n  var iDen = 1 / Den\n  I.x = (A * dbx - dax * B) * iDen\n  I.y = (A * dby - day * B) * iDen\n\n  if (!InRectangle(I, b1, b2)) return null\n  if ((day > 0 && I.y > a1.y) || (day < 0 && I.y < a1.y)) return null\n  if ((dax > 0 && I.x > a1.x) || (dax < 0 && I.x < a1.x)) return null\n  return I\n}\n\n/**\n * Get Line Intersection\n *\n * @private\n * @param {Point} a1\n * @param {Point} a2\n * @param {Point} b1\n * @param {Point} b2\n * @param {Point} c\n * @returns {Point}\n */\nfunction GetLineIntersection (a1, a2, b1, b2, c) {\n  var dax = (a1.x - a2.x)\n  var dbx = (b1.x - b2.x)\n  var day = (a1.y - a2.y)\n  var dby = (b1.y - b2.y)\n\n  var Den = dax * dby - day * dbx\n\n  if (Den === 0) { return null } // parallel\n\n  var A = (a1.x * a2.y - a1.y * a2.x)\n  var B = (b1.x * b2.y - b1.y * b2.x)\n\n  var I = c\n  I.x = (A * dbx - dax * B) / Den\n  I.y = (A * dby - day * B) / Den\n\n  if (InRectangle(I, a1, a2) && InRectangle(I, b1, b2)) {\n    return I\n  }\n  return null\n}\n\n/**\n * In Rectangle\n *\n * @private\n * @param {Point} a\n * @param {Point} b\n * @param {Point} c\n * @return {boolean}\n */\nfunction InRectangle (a, b, c) {\n  var minx = Math.min(b.x, c.x)\n  var maxx = Math.max(b.x, c.x)\n  var miny = Math.min(b.y, c.y)\n  var maxy = Math.max(b.y, c.y)\n\n  if (minx === maxx) { return (miny <= a.y && a.y <= maxy) }\n  if (miny === maxy) { return (minx <= a.x && a.x <= maxx) }\n\n  // return (minx <= a.x && a.x <= maxx && miny <= a.y && a.y <= maxy)\n  return (minx <= a.x + 1e-10 && a.x - 1e-10 <= maxx && miny <= a.y + 1e-10 && a.y - 1e-10 <= maxy)\n}\n\n/**\n * Convex\n *\n * @private\n * @param {Point} ax\n * @param {Point} ay\n * @param {Point} bx\n * @param {Point} by\n * @param {Point} cx\n * @param {Point} cy\n * @returns {boolean}\n */\nfunction convex (ax, ay, bx, by, cx, cy) {\n  return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0\n}\n\n/**\n * Point\n *\n * @private\n * @param {number} x\n * @param {number} y\n * @returns {Point}\n */\nfunction Point (x, y) {\n  return {\n    x: x,\n    y: y,\n    flag: false,\n    toString: function () { return 'Point [' + x + ', ' + y + ']' }\n  }\n}\n\n/**\n * Distance\n *\n * @private\n * @param {Point} a\n * @param {Point} b\n * @returns {number}\n */\nfunction distance (a, b) {\n  var dx = b.x - a.x\n  var dy = b.y - a.y\n  return Math.sqrt(dx * dx + dy * dy)\n}\n\n/**\n * Creates an array of empty Points\n *\n * @private\n * @param {number} [num=10] Number of points\n * @returns {Point[]}\n */\nfunction emptyPoints (num) {\n  num = num || 10\n  var container = []\n  for (var i = 0; i < num; i++) { container.push(Point(0, 0)) }\n  return container\n}\n"],"names":[],"mappings":"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"}